using DryIoc.ImTools;
using NUnit.Framework;
using NUnit.Framework.Internal;
using System;
using System.Linq;
using UsingExample;
using DryIoc.FastExpressionCompiler.LightExpression;
using System.Text;

namespace DryIoc.IssuesTests;

[TestFixture]
public sealed class GHIssue503_Compile_time_container : ITest
{
    public int Run()
    {
        Generate_the_full_compile_time_container_code();
        return 1;
    }

    [Test]
    public void Generate_the_full_compile_time_container_code()
    {
        var c = new Container();

        var container = MyCompileTimeDI.RegisterInContainer().With(rules => rules.WithExpressionGenerationSettingsOnly());

        var result = container.GenerateResolutionExpressions(x => x.SelectMany(r =>
            MyCompileTimeDI.SpecifyResolutionRoots(r).EmptyIfNull()).Concat(MyCompileTimeDI.CustomResolutionRoots.EmptyIfNull()));

        string TrimUsings(string source)
        {
            source = source.Replace("DryIoc.", "");
            // todo: @wip remove unnecessary usings that's are System.Collections.Generic for KeyValuePair, etc.
            foreach (var x in MyCompileTimeDI.NamespaceUsings)
                source = source.Replace(x + ".", "");
            return source;
        }

        // todo: @wip convert to the static methods
        string Code(object x, int lineIdent = 0) =>
            x == null ? "null" :
            x is Expression e ? TrimUsings(e.ToCSharpString(new StringBuilder(), lineIdent).ToString()) :
            x is Request r ? Code(container.GetRequestExpression(r), lineIdent) :
            Code(container.GetConstantExpression(x, x.GetType(), true), lineIdent);

        // without `typeof`
        string TypeOnlyCode(Type type) => TrimUsings(type.ToCode(printGenericTypeArgs: true));

        string GetTypeNameOnly(string typeName) => typeName.Split('`').First().Split('.').Last();

        // todo: @wip use it
        // string CommaOptArg(string arg) => arg == "null" ? "" : ", " + arg;

        var getServiceBodyLineIdent = 16;

        var rootCodes = result.Roots.Select((r, i) =>
            new
            {
                ServiceType = r.Key.ServiceType,
                ServiceTypeCode = Code(r.Key.ServiceType),
                ServiceTypeOnlyCode = TypeOnlyCode(r.Key.ServiceType),
                ServiceKeyCode = Code(r.Key.ServiceKey),
                RequiredServiceTypeCode = Code(r.Key.Details.RequiredServiceType),
                ExpressionCode = Code(r.Value.Body, getServiceBodyLineIdent),
                CreateMethodName = "Get_" + GetTypeNameOnly(r.Key.ServiceType.Name) + "_" + i
            }).ToArray();

        var depCodes = result.ResolveDependencies.Select((r, i) =>
            new
            {
                ServiceType = Code(r.Key.ServiceType),
                ServiceTypeOnly = TypeOnlyCode(r.Key.ServiceType),
                ServiceKey = Code(r.Key.ServiceKey),
                ServiceKeyObject = r.Key.ServiceKey,
                Expression = Code(r.Value, getServiceBodyLineIdent),
                ExpressionObject = r.Value,
                RequiredServiceType = Code(r.Key.RequiredServiceType),
                PreResolveParent = Code(r.Key.Parent, getServiceBodyLineIdent + 8),
                PreResolveParentObject = r.Key.Parent,
                CreateMethodName = "GetDependency_" + GetTypeNameOnly(r.Key.ServiceType.Name) + "_" + i
            }).ToArray();

        var includeVariants = container.Rules.VariantGenericTypesInResolvedCollection;

        var s = new StringBuilder(4096);
        s.Append(
            """
            // <auto-generated/>
            /*
            The MIT License (MIT)

            Copyright (c) 2016-2024 Maksim Volkau

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.

            =================================================================================================
            The code below is generated at compile-time and changes here will be lost on the next generation.
            =================================================================================================
            """);

        var errCount = result.Errors.Count;
        if (errCount != 0)
        {
            s.Append(
                $"""

                There are {errCount} generation ERRORS:
                
                
                """);

            var eNum = 0;
            foreach (var e in result.Errors)
                s.Append(
                    $"""

                    {++eNum}. {e.Key}:
                    {e.Value.Message}


                    """);
        }

        var notResolvedDeps = 0;
        foreach (var dc in depCodes)
            if (dc.ExpressionObject == null)
            {
                if (notResolvedDeps++ == 0)
                    s.Append(
                        """

                        WARNINGS: Some dependencies are missing. Register them at runtime or add to the compile-time registrations.


                        """);

                // todo: @wip remove unnecessary info from the output
                s.Append(
                    $"""

                    `{dc.ServiceTypeOnly}` {(dc.ServiceKeyObject == null ? "" : $"with key {dc.ServiceKey} ")}in {dc.PreResolveParentObject}
                    
                    """);
            }

        if (notResolvedDeps > 0)
            depCodes = depCodes.Match(static d => d.ExpressionObject != null);

        s.Append(
            """
            --------------------------------------------------------------------------------------------------------
            */

            namespace DryIoc; // todo: @wip can we use User namespace here?

            using System;
            using System.Collections.Generic;
            using System.Threading;
            using DryIoc.ImTools;

            // Usings set in the `NamespaceUsings`:
            """);

        foreach (var ns in MyCompileTimeDI.NamespaceUsings)
            s.Append(
                $"""

                using {ns};
                
                """);
        s.Append(
            """

            // todo: @wip customize the container class name
            ///<summary>The container provides access to the object graph generated using the DryIoc own tools at compile-time</summary>
            public sealed class CompileTimeContainer : ICompileTimeContainer
            {
                ///<summary>The instance if generated compile-time container.</summary>
                public static readonly CompileTimeContainer Instance = new CompileTimeContainer();

                // todo: @wip tbd
                /// <inheritdoc/>
                public bool IsRegistered(Type serviceType) => false;
                /// <inheritdoc/>
                public bool IsRegistered(Type serviceType, object serviceKey) => false;

                /// <inheritdoc/>
                public bool TryResolve(out object service, IResolverContext r, Type serviceType)
                {
            """);
        var i = 0;
        foreach (var root in rootCodes.Where(f => f.ServiceKeyCode == "null"))
            s.Append(
                $$"""

                        {{(i++ > 0 ? "else " : "")}}if (serviceType == {{root.ServiceTypeCode}})
                        {
                            service = {{root.CreateMethodName}} (r);
                            return true;
                        }
                """);
        s.Append(
            """
                    service = null;
                    return false;
                }
            """);

        var @cs = s.ToString();
        StringAssert.Contains("serviceType == ", @cs);
    }
}
